#!/usr/bin/env bash

exit_if_branch_invalid () {
  BRANCH="$1"
  if ! git rev-parse --verify ${BRANCH} >/dev/null 2>&1 ; then
    echo "Branch ${BRANCH} does not exist."
    exit 2
  fi

  echo "Branch ${BRANCH} selected."

  if [ "${BRANCH}" = "main" ]; then
    echo "Never deleting ${BRANCH}."
    exit 3
  elif [ "${BRANCH}" = "master" ]; then
    echo "Never deleting ${BRANCH}."
    exit 3
  fi
}

POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
  case $1 in
    -*|--*)
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=($1)
      shift
      ;;
  esac

done

set -- "${POSITIONAL_ARGS[@]}"

if [[ -n "$1" ]]; then
  BRANCH="$1"
fi

if [ -z ${BRANCH+x} ]; then
  echo "No branch specified!"
  exit 1
fi

exit_if_branch_invalid $BRANCH

SYSTEM_PROFILES_ROOT="/nix/var/nix/profiles/system-profiles"

shopt -s nullglob
MATCHING_BUILDS=()
for link in ${SYSTEM_PROFILES_ROOT}/${BRANCH}*; do
  [ -L "$link" ] || continue
  MATCHING_BUILDS+=($link)
done
N_MATCHING_BUILDS=${#MATCHING_BUILDS[@]}

# TODO only use -D when explicitly forced
echo "1. Will run \"git branch -d ${BRANCH}\""
echo "2. Will unlink $N_MATCHING_BUILDS matching builds."
echo "3. Regenerate boot entries."

read -p "Are you sure? " -n 1 -r
echo    # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    # handle exits from shell or function but don't exit interactive shell
    [[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1
fi

# exit on nonzero status code
set -e

echo "Deleting branch."
git branch -d ${BRANCH}

echo "Unlinking builds."
for link in ${MATCHING_BUILDS[@]}; do
  echo "Unlinking ${link}."
  sudo unlink "$link"
done

echo "Regenerating boot entries."
sudo /run/current-system/bin/switch-to-configuration boot
